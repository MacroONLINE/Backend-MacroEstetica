import { PrismaService } from '../prisma/prisma.service';
import { CreateProductDto } from './dto/create-product.dto';
import { ReactionType, Product } from '@prisma/client';
import { CloudinaryService } from '../cloudinary/cloudinary.service';
export declare class ProductService {
    private readonly prisma;
    private readonly cloud;
    constructor(prisma: PrismaService, cloud: CloudinaryService);
    create(dto: CreateProductDto): Promise<Product>;
    findAll(companyId: string, userId?: string): Promise<{
        description: string;
        name: string;
        categoryId: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isFeatured: boolean | null;
        companyId: string;
        activeIngredients: string[];
        benefits: string[];
        features: string[];
        imageGallery: string[];
        imageMain: string | null;
        isBestSeller: boolean | null;
        isOnSale: boolean | null;
        lab: string | null;
        problemAddressed: string | null;
        presentations: string[];
    }[]>;
    findByCategory(companyId: string, categoryId: number, userId?: string): Promise<{
        description: string;
        name: string;
        categoryId: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isFeatured: boolean | null;
        companyId: string;
        activeIngredients: string[];
        benefits: string[];
        features: string[];
        imageGallery: string[];
        imageMain: string | null;
        isBestSeller: boolean | null;
        isOnSale: boolean | null;
        lab: string | null;
        problemAddressed: string | null;
        presentations: string[];
    }[]>;
    findFeaturedByCompany(companyId: string, userId?: string): Promise<{
        description: string;
        name: string;
        categoryId: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isFeatured: boolean | null;
        companyId: string;
        activeIngredients: string[];
        benefits: string[];
        features: string[];
        imageGallery: string[];
        imageMain: string | null;
        isBestSeller: boolean | null;
        isOnSale: boolean | null;
        lab: string | null;
        problemAddressed: string | null;
        presentations: string[];
    }[]>;
    findHighlightedByCompany(companyId: string, userId?: string): Promise<{
        description: string;
        name: string;
        categoryId: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isFeatured: boolean | null;
        companyId: string;
        activeIngredients: string[];
        benefits: string[];
        features: string[];
        imageGallery: string[];
        imageMain: string | null;
        isBestSeller: boolean | null;
        isOnSale: boolean | null;
        lab: string | null;
        problemAddressed: string | null;
        presentations: string[];
    }[]>;
    findOfferByCompany(companyId: string, userId?: string): Promise<{
        description: string;
        name: string;
        categoryId: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isFeatured: boolean | null;
        companyId: string;
        activeIngredients: string[];
        benefits: string[];
        features: string[];
        imageGallery: string[];
        imageMain: string | null;
        isBestSeller: boolean | null;
        isOnSale: boolean | null;
        lab: string | null;
        problemAddressed: string | null;
        presentations: string[];
    }[]>;
    findNormalByCompany(companyId: string, userId?: string): Promise<{
        description: string;
        name: string;
        categoryId: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isFeatured: boolean | null;
        companyId: string;
        activeIngredients: string[];
        benefits: string[];
        features: string[];
        imageGallery: string[];
        imageMain: string | null;
        isBestSeller: boolean | null;
        isOnSale: boolean | null;
        lab: string | null;
        problemAddressed: string | null;
        presentations: string[];
    }[]>;
    findAllGroupedByType(companyId: string, userId?: string): Promise<{
        FEATURED: {
            description: string;
            name: string;
            categoryId: number | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isFeatured: boolean | null;
            companyId: string;
            activeIngredients: string[];
            benefits: string[];
            features: string[];
            imageGallery: string[];
            imageMain: string | null;
            isBestSeller: boolean | null;
            isOnSale: boolean | null;
            lab: string | null;
            problemAddressed: string | null;
            presentations: string[];
        }[];
        HIGHLIGHT: {
            description: string;
            name: string;
            categoryId: number | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isFeatured: boolean | null;
            companyId: string;
            activeIngredients: string[];
            benefits: string[];
            features: string[];
            imageGallery: string[];
            imageMain: string | null;
            isBestSeller: boolean | null;
            isOnSale: boolean | null;
            lab: string | null;
            problemAddressed: string | null;
            presentations: string[];
        }[];
        OFFER: {
            description: string;
            name: string;
            categoryId: number | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isFeatured: boolean | null;
            companyId: string;
            activeIngredients: string[];
            benefits: string[];
            features: string[];
            imageGallery: string[];
            imageMain: string | null;
            isBestSeller: boolean | null;
            isOnSale: boolean | null;
            lab: string | null;
            problemAddressed: string | null;
            presentations: string[];
        }[];
        NORMAL: {
            description: string;
            name: string;
            categoryId: number | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isFeatured: boolean | null;
            companyId: string;
            activeIngredients: string[];
            benefits: string[];
            features: string[];
            imageGallery: string[];
            imageMain: string | null;
            isBestSeller: boolean | null;
            isOnSale: boolean | null;
            lab: string | null;
            problemAddressed: string | null;
            presentations: string[];
        }[];
    }>;
    findById(id: string, userId?: string): Promise<{
        description: string;
        name: string;
        categoryId: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isFeatured: boolean | null;
        companyId: string;
        activeIngredients: string[];
        benefits: string[];
        features: string[];
        imageGallery: string[];
        imageMain: string | null;
        isBestSeller: boolean | null;
        isOnSale: boolean | null;
        lab: string | null;
        problemAddressed: string | null;
        presentations: string[];
    } | {
        liked: boolean;
        description: string;
        name: string;
        categoryId: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isFeatured: boolean | null;
        companyId: string;
        activeIngredients: string[];
        benefits: string[];
        features: string[];
        imageGallery: string[];
        imageMain: string | null;
        isBestSeller: boolean | null;
        isOnSale: boolean | null;
        lab: string | null;
        problemAddressed: string | null;
        presentations: string[];
    }>;
    updateWithImages(id: string, body: Record<string, string>, files: Express.Multer.File[]): Promise<Product>;
    remove(id: string): Promise<{
        message: string;
    }>;
    toggleProductReaction(userId: string, productId: string, type?: ReactionType): Promise<{
        userId: string;
        productId: string;
        reacted: boolean;
        type?: undefined;
    } | {
        userId: string;
        productId: string;
        reacted: boolean;
        type: import(".prisma/client").$Enums.ReactionType;
    }>;
    getLikedProducts(userId: string): Promise<{
        liked: boolean;
        description: string;
        name: string;
        categoryId: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isFeatured: boolean | null;
        companyId: string;
        activeIngredients: string[];
        benefits: string[];
        features: string[];
        imageGallery: string[];
        imageMain: string | null;
        isBestSeller: boolean | null;
        isOnSale: boolean | null;
        lab: string | null;
        problemAddressed: string | null;
        presentations: string[];
    }[]>;
    private getLikedProductIds;
}
