import { PrismaService } from '../prisma/prisma.service';
import { Giro, Target } from '@prisma/client';
import { CloudinaryService } from 'src/cloudinary/cloudinary.service';
export declare class EmpresaService {
    private readonly prisma;
    private readonly cloudinaryService;
    constructor(prisma: PrismaService, cloudinaryService: CloudinaryService);
    getAllByCategory(category: Giro): Promise<({
        user: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            firstName: string | null;
            lastName: string | null;
            phone: string | null;
            email: string;
            emailVerified: Date | null;
            address: string | null;
            province: string | null;
            city: string | null;
            country: string | null;
            countryCode: string | null;
            zipCode: string | null;
            role: import(".prisma/client").$Enums.Role;
            password: string;
            status: boolean;
            newsletter: boolean;
            userSubscription: string | null;
            profileImageUrl: string | null;
        };
    } & {
        id: string;
        dni: string | null;
        name: string;
        giro: import(".prisma/client").$Enums.Giro;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        subscription: import(".prisma/client").$Enums.SubscriptionType | null;
        bannerImage: string | null;
        categoria: import(".prisma/client").$Enums.EmpresaCategory;
        ceo: string | null;
        ceoRole: string | null;
        followers: number;
        location: string | null;
        logo: string | null;
        profileImage: string | null;
        title: string | null;
        webUrl: string | null;
        legalName: string | null;
    })[]>;
    getAllByGiro(giro: Giro): Promise<({
        user: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            firstName: string | null;
            lastName: string | null;
            phone: string | null;
            email: string;
            emailVerified: Date | null;
            address: string | null;
            province: string | null;
            city: string | null;
            country: string | null;
            countryCode: string | null;
            zipCode: string | null;
            role: import(".prisma/client").$Enums.Role;
            password: string;
            status: boolean;
            newsletter: boolean;
            userSubscription: string | null;
            profileImageUrl: string | null;
        };
    } & {
        id: string;
        dni: string | null;
        name: string;
        giro: import(".prisma/client").$Enums.Giro;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        subscription: import(".prisma/client").$Enums.SubscriptionType | null;
        bannerImage: string | null;
        categoria: import(".prisma/client").$Enums.EmpresaCategory;
        ceo: string | null;
        ceoRole: string | null;
        followers: number;
        location: string | null;
        logo: string | null;
        profileImage: string | null;
        title: string | null;
        webUrl: string | null;
        legalName: string | null;
    })[]>;
    getAllByTarget(target: Target): Promise<({
        user: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            firstName: string | null;
            lastName: string | null;
            phone: string | null;
            email: string;
            emailVerified: Date | null;
            address: string | null;
            province: string | null;
            city: string | null;
            country: string | null;
            countryCode: string | null;
            zipCode: string | null;
            role: import(".prisma/client").$Enums.Role;
            password: string;
            status: boolean;
            newsletter: boolean;
            userSubscription: string | null;
            profileImageUrl: string | null;
        };
    } & {
        id: string;
        dni: string | null;
        name: string;
        giro: import(".prisma/client").$Enums.Giro;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        subscription: import(".prisma/client").$Enums.SubscriptionType | null;
        bannerImage: string | null;
        categoria: import(".prisma/client").$Enums.EmpresaCategory;
        ceo: string | null;
        ceoRole: string | null;
        followers: number;
        location: string | null;
        logo: string | null;
        profileImage: string | null;
        title: string | null;
        webUrl: string | null;
        legalName: string | null;
    })[]>;
    getAllByGiroAndTarget(giro: Giro, target: Target): Promise<({
        user: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            firstName: string | null;
            lastName: string | null;
            phone: string | null;
            email: string;
            emailVerified: Date | null;
            address: string | null;
            province: string | null;
            city: string | null;
            country: string | null;
            countryCode: string | null;
            zipCode: string | null;
            role: import(".prisma/client").$Enums.Role;
            password: string;
            status: boolean;
            newsletter: boolean;
            userSubscription: string | null;
            profileImageUrl: string | null;
        };
    } & {
        id: string;
        dni: string | null;
        name: string;
        giro: import(".prisma/client").$Enums.Giro;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        subscription: import(".prisma/client").$Enums.SubscriptionType | null;
        bannerImage: string | null;
        categoria: import(".prisma/client").$Enums.EmpresaCategory;
        ceo: string | null;
        ceoRole: string | null;
        followers: number;
        location: string | null;
        logo: string | null;
        profileImage: string | null;
        title: string | null;
        webUrl: string | null;
        legalName: string | null;
    })[]>;
    getEmpresaConMinisite(empresaId: string): Promise<{
        banners: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            logo: string;
            title: string;
            description: string;
            empresaId: string | null;
            banner: string;
            date: Date | null;
            cta_url: string | null;
            cta_button_text: string;
        }[];
        instructores: {
            id: string;
            userId: string;
            createdAt: Date;
            updatedAt: Date;
            bannerImage: string | null;
            followers: number | null;
            title: string | null;
            status: string;
            description: string;
            experienceYears: number;
            certificationsUrl: string;
            profession: import(".prisma/client").$Enums.Profession;
            type: import(".prisma/client").$Enums.ProfessionType;
            empresaId: string | null;
            categoryId: string | null;
            experienceDescription: string;
            genero: import(".prisma/client").$Enums.Gender | null;
            validated: boolean | null;
        }[];
        minisite: {
            benefits: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                title: string;
                description: string;
                minisiteId: string;
            }[];
            featuredProducts: ({
                product: {
                    id: string;
                    name: string;
                    createdAt: Date;
                    updatedAt: Date;
                    description: string;
                    categoryId: number;
                    benefits: string[];
                    companyId: string;
                    isFeatured: boolean | null;
                    activeIngredients: string[];
                    features: string[];
                    imageGallery: string[];
                    imageMain: string | null;
                    isBestSeller: boolean | null;
                    isOnSale: boolean | null;
                    lab: string | null;
                    problemAddressed: string | null;
                };
            } & {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                minisiteId: string;
                productId: string;
                order: number | null;
                tagline: string | null;
            })[];
            highlightProducts: ({
                product: {
                    id: string;
                    name: string;
                    createdAt: Date;
                    updatedAt: Date;
                    description: string;
                    categoryId: number;
                    benefits: string[];
                    companyId: string;
                    isFeatured: boolean | null;
                    activeIngredients: string[];
                    features: string[];
                    imageGallery: string[];
                    imageMain: string | null;
                    isBestSeller: boolean | null;
                    isOnSale: boolean | null;
                    lab: string | null;
                    problemAddressed: string | null;
                };
            } & {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                minisiteId: string;
                productId: string;
                highlightFeatures: string[];
                highlightDescription: string | null;
                hoghlightImageUrl: string | null;
            })[];
            offers: ({
                products: {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    description: string;
                    offerId: string;
                }[];
            } & {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                minisiteId: string;
                sectionTitle: string | null;
            })[];
            slides: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                title: string;
                description: string;
                minisiteId: string;
                order: number | null;
                cta: string | null;
                imageSrc: string | null;
            }[];
            specialities: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                title: string;
                minisiteId: string;
                imageUrl: string;
            }[];
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            empresaId: string;
            videoUrl: string | null;
            aboutDescription: import("@prisma/client/runtime/library").JsonValue | null;
            followersCount: number | null;
            coursesCount: number | null;
            productsCount: number | null;
            minisiteColor: string | null;
            slogan: string | null;
            catalogueUrl: string | null;
        };
        productos: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string;
            categoryId: number;
            benefits: string[];
            companyId: string;
            isFeatured: boolean | null;
            activeIngredients: string[];
            features: string[];
            imageGallery: string[];
            imageMain: string | null;
            isBestSeller: boolean | null;
            isOnSale: boolean | null;
            lab: string | null;
            problemAddressed: string | null;
        }[];
        categorias: ({
            products: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                description: string;
                categoryId: number;
                benefits: string[];
                companyId: string;
                isFeatured: boolean | null;
                activeIngredients: string[];
                features: string[];
                imageGallery: string[];
                imageMain: string | null;
                isBestSeller: boolean | null;
                isOnSale: boolean | null;
                lab: string | null;
                problemAddressed: string | null;
            }[];
        } & {
            id: number;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            companyId: string;
            bannerImageUrl: string | null;
            miniSiteImageUrl: string | null;
            footerBanner: string | null;
            iconUrl: string | null;
        })[];
    } & {
        id: string;
        dni: string | null;
        name: string;
        giro: import(".prisma/client").$Enums.Giro;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        subscription: import(".prisma/client").$Enums.SubscriptionType | null;
        bannerImage: string | null;
        categoria: import(".prisma/client").$Enums.EmpresaCategory;
        ceo: string | null;
        ceoRole: string | null;
        followers: number;
        location: string | null;
        logo: string | null;
        profileImage: string | null;
        title: string | null;
        webUrl: string | null;
        legalName: string | null;
    }>;
    uploadCatalogue(empresaId: string, file: Express.Multer.File): Promise<{
        message: string;
        catalogueUrl: string;
    }>;
    getPlanByUserId(userId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        type: import(".prisma/client").$Enums.SubscriptionType;
        price: number;
    }>;
}
