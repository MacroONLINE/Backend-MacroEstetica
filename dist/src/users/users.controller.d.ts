import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { UpdateMedicoDto } from './dto/update-medico.dto';
import { UpdateInstructorDto } from './dto/update-instructor.dto';
import { UpdateEmpresaDto } from './dto/update-empresa.dto';
import { UpdateProfileDto } from './dto/update-profile.dto/update-profile.dto';
import { ChangePasswordDto } from './dto/change-password.dto/change-password.dto';
import { ChangeEmailDto } from './dto/change-email.dto/change-email.dto';
export declare class UsersController {
    private usersService;
    private readonly logger;
    constructor(usersService: UsersService);
    checkUserByEmail(email: string): Promise<{
        exists: boolean;
        user: {
            status: boolean;
            firstName: string | null;
            lastName: string | null;
            phone: string | null;
            address: string | null;
            province: string | null;
            city: string | null;
            country: string | null;
            countryCode: string | null;
            zipCode: string | null;
            id: string;
            email: string;
            emailVerified: Date | null;
            role: import(".prisma/client").$Enums.Role;
            createdAt: Date;
            updatedAt: Date;
            newsletter: boolean;
            userSubscription: string | null;
            profileImageUrl: string | null;
        };
    } | {
        exists: boolean;
        user?: undefined;
    }>;
    register(dto: CreateUserDto): Promise<{
        message: string;
        userId: string;
    }>;
    completeProfile(dto: UpdateUserDto): Promise<{
        message: string;
    }>;
    updateMedico(file: Express.Multer.File, dto: UpdateMedicoDto): Promise<{
        userId: string;
        type: import(".prisma/client").$Enums.ProfessionType;
        profession: import(".prisma/client").$Enums.Profession;
        verification: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateEmpresa(dto: UpdateEmpresaDto): Promise<{
        subscription: import(".prisma/client").$Enums.SubscriptionType | null;
        userId: string;
        title: string | null;
        name: string;
        giro: import(".prisma/client").$Enums.Giro;
        webUrl: string | null;
        bannerImage: string | null;
        logo: string | null;
        profileImage: string | null;
        ceo: string | null;
        ceoRole: string | null;
        location: string | null;
        dni: string | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        categoria: import(".prisma/client").$Enums.EmpresaCategory;
        followers: number;
        legalName: string | null;
    }>;
    updateInstructor(dto: UpdateInstructorDto): Promise<{
        userId: string;
        type: import(".prisma/client").$Enums.ProfessionType;
        description: string;
        title: string | null;
        profession: import(".prisma/client").$Enums.Profession;
        bannerImage: string | null;
        experienceYears: number;
        certificationsUrl: string;
        status: string;
        empresaId: string | null;
        categoryId: string | null;
        validated: boolean | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        followers: number | null;
        experienceDescription: string;
        genero: import(".prisma/client").$Enums.Gender | null;
    }>;
    updateProfile(req: any, dto: UpdateProfileDto): Promise<{
        status: boolean;
        firstName: string | null;
        lastName: string | null;
        phone: string | null;
        address: string | null;
        province: string | null;
        city: string | null;
        country: string | null;
        countryCode: string | null;
        zipCode: string | null;
        id: string;
        email: string;
        emailVerified: Date | null;
        role: import(".prisma/client").$Enums.Role;
        password: string;
        createdAt: Date;
        updatedAt: Date;
        newsletter: boolean;
        userSubscription: string | null;
        profileImageUrl: string | null;
    }>;
    uploadProfileImage(req: any, file: Express.Multer.File): Promise<{
        status: boolean;
        firstName: string | null;
        lastName: string | null;
        phone: string | null;
        address: string | null;
        province: string | null;
        city: string | null;
        country: string | null;
        countryCode: string | null;
        zipCode: string | null;
        id: string;
        email: string;
        emailVerified: Date | null;
        role: import(".prisma/client").$Enums.Role;
        password: string;
        createdAt: Date;
        updatedAt: Date;
        newsletter: boolean;
        userSubscription: string | null;
        profileImageUrl: string | null;
    }>;
    changePassword(req: any, dto: ChangePasswordDto): Promise<{
        message: string;
    }>;
    changeEmail(req: any, dto: ChangeEmailDto): Promise<{
        message: string;
    }>;
    getMedico(req: any): Promise<{
        userId: string;
        type: import(".prisma/client").$Enums.ProfessionType;
        profession: import(".prisma/client").$Enums.Profession;
        verification: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getEmpresa(req: any): Promise<{
        subscription: import(".prisma/client").$Enums.SubscriptionType | null;
        userId: string;
        title: string | null;
        name: string;
        giro: import(".prisma/client").$Enums.Giro;
        webUrl: string | null;
        bannerImage: string | null;
        logo: string | null;
        profileImage: string | null;
        ceo: string | null;
        ceoRole: string | null;
        location: string | null;
        dni: string | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        categoria: import(".prisma/client").$Enums.EmpresaCategory;
        followers: number;
        legalName: string | null;
    }>;
    getInstructor(req: any): Promise<{
        userId: string;
        type: import(".prisma/client").$Enums.ProfessionType;
        description: string;
        title: string | null;
        profession: import(".prisma/client").$Enums.Profession;
        bannerImage: string | null;
        experienceYears: number;
        certificationsUrl: string;
        status: string;
        empresaId: string | null;
        categoryId: string | null;
        validated: boolean | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        followers: number | null;
        experienceDescription: string;
        genero: import(".prisma/client").$Enums.Gender | null;
    }>;
    findUserById(id: string): Promise<{
        status: boolean;
        firstName: string | null;
        lastName: string | null;
        phone: string | null;
        address: string | null;
        province: string | null;
        city: string | null;
        country: string | null;
        countryCode: string | null;
        zipCode: string | null;
        id: string;
        email: string;
        emailVerified: Date | null;
        role: import(".prisma/client").$Enums.Role;
        createdAt: Date;
        updatedAt: Date;
        newsletter: boolean;
        userSubscription: string | null;
        profileImageUrl: string | null;
    }>;
}
