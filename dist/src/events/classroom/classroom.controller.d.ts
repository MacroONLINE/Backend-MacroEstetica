import { ClassroomService } from './classroom.service';
import { CreateClassroomDto } from './dto/create-classroom.dto';
import { UpdateClassroomDto } from './dto/update-classroom.dto';
import { $Enums } from '@prisma/client';
declare class OratorDto {
    instructorId: string;
}
export declare class ClassroomController {
    private readonly service;
    constructor(service: ClassroomService);
    create(empresaId: string, dto: CreateClassroomDto, image?: Express.Multer.File): Promise<{
        empresa: {
            subscription: $Enums.SubscriptionType | null;
            userId: string;
            title: string | null;
            name: string;
            giro: $Enums.Giro;
            categoria: $Enums.EmpresaCategory;
            webUrl: string | null;
            bannerImage: string | null;
            logo: string | null;
            profileImage: string | null;
            ceo: string | null;
            ceoRole: string | null;
            location: string | null;
            dni: string | null;
            target: $Enums.Target;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            followers: number;
            verified: boolean;
            legalName: string | null;
        };
        description: string;
        title: string;
        empresaId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        enrollments: {
            userId: string;
            status: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            classroomId: string;
        }[];
        _count: {
            enrollments: number;
            attendees: number;
            orators: number;
            empresa: number;
            invites: number;
        };
        channelName: string;
        endDateTime: Date;
        imageUrl: string;
        price: number;
        startDateTime: Date;
        categories: $Enums.Profession[];
        isFree: boolean;
        orators: {
            userId: string;
            type: $Enums.ProfessionType;
            description: string;
            title: string | null;
            profession: $Enums.Profession;
            bannerImage: string | null;
            experienceYears: number;
            certificationsUrl: string;
            status: string;
            empresaId: string | null;
            categoryId: string | null;
            validated: boolean | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            followers: number | null;
            experienceDescription: string;
            genero: $Enums.Gender | null;
        }[];
        invites: {
            userId: string | null;
            status: $Enums.InviteStatus;
            id: string;
            email: string;
            classroomId: string;
            token: string;
            sentAt: Date;
            acceptedAt: Date | null;
        }[];
        attendees: {
            status: boolean;
            firstName: string | null;
            lastName: string | null;
            phone: string | null;
            address: string | null;
            province: string | null;
            city: string | null;
            country: string | null;
            countryCode: string | null;
            zipCode: string | null;
            password: string;
            id: string;
            email: string;
            emailVerified: Date | null;
            role: $Enums.Role;
            createdAt: Date;
            updatedAt: Date;
            newsletter: boolean;
            userSubscription: string | null;
            profileImageUrl: string | null;
        }[];
    }>;
    update(empresaId: string, id: string, dto: UpdateClassroomDto, image?: Express.Multer.File): Promise<{
        empresa: {
            subscription: $Enums.SubscriptionType | null;
            userId: string;
            title: string | null;
            name: string;
            giro: $Enums.Giro;
            categoria: $Enums.EmpresaCategory;
            webUrl: string | null;
            bannerImage: string | null;
            logo: string | null;
            profileImage: string | null;
            ceo: string | null;
            ceoRole: string | null;
            location: string | null;
            dni: string | null;
            target: $Enums.Target;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            followers: number;
            verified: boolean;
            legalName: string | null;
        };
        description: string;
        title: string;
        empresaId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        enrollments: {
            userId: string;
            status: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            classroomId: string;
        }[];
        _count: {
            enrollments: number;
            attendees: number;
            orators: number;
            empresa: number;
            invites: number;
        };
        channelName: string;
        endDateTime: Date;
        imageUrl: string;
        price: number;
        startDateTime: Date;
        categories: $Enums.Profession[];
        isFree: boolean;
        orators: {
            userId: string;
            type: $Enums.ProfessionType;
            description: string;
            title: string | null;
            profession: $Enums.Profession;
            bannerImage: string | null;
            experienceYears: number;
            certificationsUrl: string;
            status: string;
            empresaId: string | null;
            categoryId: string | null;
            validated: boolean | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            followers: number | null;
            experienceDescription: string;
            genero: $Enums.Gender | null;
        }[];
        invites: {
            userId: string | null;
            status: $Enums.InviteStatus;
            id: string;
            email: string;
            classroomId: string;
            token: string;
            sentAt: Date;
            acceptedAt: Date | null;
        }[];
        attendees: {
            status: boolean;
            firstName: string | null;
            lastName: string | null;
            phone: string | null;
            address: string | null;
            province: string | null;
            city: string | null;
            country: string | null;
            countryCode: string | null;
            zipCode: string | null;
            password: string;
            id: string;
            email: string;
            emailVerified: Date | null;
            role: $Enums.Role;
            createdAt: Date;
            updatedAt: Date;
            newsletter: boolean;
            userSubscription: string | null;
            profileImageUrl: string | null;
        }[];
    }>;
    remove(id: string): Promise<{
        message: string;
    }>;
    upcoming(): Promise<{
        empresa: {
            subscription: $Enums.SubscriptionType | null;
            userId: string;
            title: string | null;
            name: string;
            giro: $Enums.Giro;
            categoria: $Enums.EmpresaCategory;
            webUrl: string | null;
            bannerImage: string | null;
            logo: string | null;
            profileImage: string | null;
            ceo: string | null;
            ceoRole: string | null;
            location: string | null;
            dni: string | null;
            target: $Enums.Target;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            followers: number;
            verified: boolean;
            legalName: string | null;
        };
        description: string;
        title: string;
        empresaId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        enrollments: {
            userId: string;
            status: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            classroomId: string;
        }[];
        _count: {
            enrollments: number;
            attendees: number;
            orators: number;
            empresa: number;
            invites: number;
        };
        channelName: string;
        endDateTime: Date;
        imageUrl: string;
        price: number;
        startDateTime: Date;
        categories: $Enums.Profession[];
        isFree: boolean;
        orators: {
            userId: string;
            type: $Enums.ProfessionType;
            description: string;
            title: string | null;
            profession: $Enums.Profession;
            bannerImage: string | null;
            experienceYears: number;
            certificationsUrl: string;
            status: string;
            empresaId: string | null;
            categoryId: string | null;
            validated: boolean | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            followers: number | null;
            experienceDescription: string;
            genero: $Enums.Gender | null;
        }[];
        invites: {
            userId: string | null;
            status: $Enums.InviteStatus;
            id: string;
            email: string;
            classroomId: string;
            token: string;
            sentAt: Date;
            acceptedAt: Date | null;
        }[];
        attendees: {
            status: boolean;
            firstName: string | null;
            lastName: string | null;
            phone: string | null;
            address: string | null;
            province: string | null;
            city: string | null;
            country: string | null;
            countryCode: string | null;
            zipCode: string | null;
            password: string;
            id: string;
            email: string;
            emailVerified: Date | null;
            role: $Enums.Role;
            createdAt: Date;
            updatedAt: Date;
            newsletter: boolean;
            userSubscription: string | null;
            profileImageUrl: string | null;
        }[];
    }[]>;
    live(): Promise<{
        empresa: {
            subscription: $Enums.SubscriptionType | null;
            userId: string;
            title: string | null;
            name: string;
            giro: $Enums.Giro;
            categoria: $Enums.EmpresaCategory;
            webUrl: string | null;
            bannerImage: string | null;
            logo: string | null;
            profileImage: string | null;
            ceo: string | null;
            ceoRole: string | null;
            location: string | null;
            dni: string | null;
            target: $Enums.Target;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            followers: number;
            verified: boolean;
            legalName: string | null;
        };
        description: string;
        title: string;
        empresaId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        enrollments: {
            userId: string;
            status: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            classroomId: string;
        }[];
        _count: {
            enrollments: number;
            attendees: number;
            orators: number;
            empresa: number;
            invites: number;
        };
        channelName: string;
        endDateTime: Date;
        imageUrl: string;
        price: number;
        startDateTime: Date;
        categories: $Enums.Profession[];
        isFree: boolean;
        orators: {
            userId: string;
            type: $Enums.ProfessionType;
            description: string;
            title: string | null;
            profession: $Enums.Profession;
            bannerImage: string | null;
            experienceYears: number;
            certificationsUrl: string;
            status: string;
            empresaId: string | null;
            categoryId: string | null;
            validated: boolean | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            followers: number | null;
            experienceDescription: string;
            genero: $Enums.Gender | null;
        }[];
        invites: {
            userId: string | null;
            status: $Enums.InviteStatus;
            id: string;
            email: string;
            classroomId: string;
            token: string;
            sentAt: Date;
            acceptedAt: Date | null;
        }[];
        attendees: {
            status: boolean;
            firstName: string | null;
            lastName: string | null;
            phone: string | null;
            address: string | null;
            province: string | null;
            city: string | null;
            country: string | null;
            countryCode: string | null;
            zipCode: string | null;
            password: string;
            id: string;
            email: string;
            emailVerified: Date | null;
            role: $Enums.Role;
            createdAt: Date;
            updatedAt: Date;
            newsletter: boolean;
            userSubscription: string | null;
            profileImageUrl: string | null;
        }[];
    }[]>;
    getOrators(empresaId: string): Promise<{
        user: {
            firstName: string;
            lastName: string;
            profileImageUrl: string;
        };
        id: string;
    }[]>;
    findOne(id: string): Promise<{
        empresa: {
            subscription: $Enums.SubscriptionType | null;
            userId: string;
            title: string | null;
            name: string;
            giro: $Enums.Giro;
            categoria: $Enums.EmpresaCategory;
            webUrl: string | null;
            bannerImage: string | null;
            logo: string | null;
            profileImage: string | null;
            ceo: string | null;
            ceoRole: string | null;
            location: string | null;
            dni: string | null;
            target: $Enums.Target;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            followers: number;
            verified: boolean;
            legalName: string | null;
        };
        description: string;
        title: string;
        empresaId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        enrollments: {
            userId: string;
            status: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            classroomId: string;
        }[];
        _count: {
            enrollments: number;
            attendees: number;
            orators: number;
            empresa: number;
            invites: number;
        };
        channelName: string;
        endDateTime: Date;
        imageUrl: string;
        price: number;
        startDateTime: Date;
        categories: $Enums.Profession[];
        isFree: boolean;
        orators: {
            userId: string;
            type: $Enums.ProfessionType;
            description: string;
            title: string | null;
            profession: $Enums.Profession;
            bannerImage: string | null;
            experienceYears: number;
            certificationsUrl: string;
            status: string;
            empresaId: string | null;
            categoryId: string | null;
            validated: boolean | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            followers: number | null;
            experienceDescription: string;
            genero: $Enums.Gender | null;
        }[];
        invites: {
            userId: string | null;
            status: $Enums.InviteStatus;
            id: string;
            email: string;
            classroomId: string;
            token: string;
            sentAt: Date;
            acceptedAt: Date | null;
        }[];
        attendees: {
            status: boolean;
            firstName: string | null;
            lastName: string | null;
            phone: string | null;
            address: string | null;
            province: string | null;
            city: string | null;
            country: string | null;
            countryCode: string | null;
            zipCode: string | null;
            password: string;
            id: string;
            email: string;
            emailVerified: Date | null;
            role: $Enums.Role;
            createdAt: Date;
            updatedAt: Date;
            newsletter: boolean;
            userSubscription: string | null;
            profileImageUrl: string | null;
        }[];
    }>;
    findAllByEmpresa(empresaId: string): Promise<{
        empresa: {
            subscription: $Enums.SubscriptionType | null;
            userId: string;
            title: string | null;
            name: string;
            giro: $Enums.Giro;
            categoria: $Enums.EmpresaCategory;
            webUrl: string | null;
            bannerImage: string | null;
            logo: string | null;
            profileImage: string | null;
            ceo: string | null;
            ceoRole: string | null;
            location: string | null;
            dni: string | null;
            target: $Enums.Target;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            followers: number;
            verified: boolean;
            legalName: string | null;
        };
        description: string;
        title: string;
        empresaId: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        enrollments: {
            userId: string;
            status: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            classroomId: string;
        }[];
        _count: {
            enrollments: number;
            attendees: number;
            orators: number;
            empresa: number;
            invites: number;
        };
        channelName: string;
        endDateTime: Date;
        imageUrl: string;
        price: number;
        startDateTime: Date;
        categories: $Enums.Profession[];
        isFree: boolean;
        orators: {
            userId: string;
            type: $Enums.ProfessionType;
            description: string;
            title: string | null;
            profession: $Enums.Profession;
            bannerImage: string | null;
            experienceYears: number;
            certificationsUrl: string;
            status: string;
            empresaId: string | null;
            categoryId: string | null;
            validated: boolean | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            followers: number | null;
            experienceDescription: string;
            genero: $Enums.Gender | null;
        }[];
        invites: {
            userId: string | null;
            status: $Enums.InviteStatus;
            id: string;
            email: string;
            classroomId: string;
            token: string;
            sentAt: Date;
            acceptedAt: Date | null;
        }[];
        attendees: {
            status: boolean;
            firstName: string | null;
            lastName: string | null;
            phone: string | null;
            address: string | null;
            province: string | null;
            city: string | null;
            country: string | null;
            countryCode: string | null;
            zipCode: string | null;
            password: string;
            id: string;
            email: string;
            emailVerified: Date | null;
            role: $Enums.Role;
            createdAt: Date;
            updatedAt: Date;
            newsletter: boolean;
            userSubscription: string | null;
            profileImageUrl: string | null;
        }[];
    }[]>;
    addOrator(id: string, dto: OratorDto): Promise<{
        id: string;
        orators: {
            id: string;
        }[];
    }>;
    removeOrator(id: string, dto: OratorDto): Promise<{
        id: string;
        orators: {
            id: string;
        }[];
    }>;
}
export {};
