generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  firstName     String?
  lastName      String?
  phone         String?
  email         String         @unique
  emailVerified DateTime?
  address       String?
  province      String?
  city          String?
  country       String?        @default("Mexico")
  countryCode   String?        @default("MX")
  zipCode       String?
  role          Role           @default(ESTANDAR)
  password      String
  status        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  newsletter    Boolean        @default(false)
  Session       Session[]
  medico        Medico?
  empresa       Empresa?
  instructor    Instructor?
  comments      Comment[] @relation("UserComments")
  enrollments   CourseEnrollment[]
}

model Instructor {
  id         String   @id @default(cuid())
  profession Profession @default(MEDICO) // Enum Profession
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  courses    Course[] @relation("InstructorCourses")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Course {
  id               String         @id @default(cuid())
  name             String
  description      String?
  cost             Float
  discount         Float?
  publicationDate  DateTime       @default(now())
  level            CourseLevel
  featured         Boolean        @default(false)
  averageRating    Float?         @default(0.0)
  participants     Int            @default(0)
  instructorId     String?
  instructor       Instructor?    @relation("InstructorCourses", fields: [instructorId], references: [id])
  modules          Module[]
  categories       CategoriesOnCourses[]
  enrollments      CourseEnrollment[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
}

model Medico {
  id           String   @id @default(cuid())
  verification String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model Product {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(200)
  description        String?   @db.Text
  cost               Decimal   @db.Decimal(10, 2)
  discount           Decimal?  @db.Decimal(10, 2)
  productCode        String    @unique @db.VarChar(100)
  availableQuantity  Int
  companyId          String    // Foreign key to Empresa
  company            Empresa   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  providerId         String?   // Optional foreign key for a provider
  isFeatured         Boolean   @default(false) // Field for featured products
  imageUrl           String?   // Field for product image URL
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}


model Empresa {
  id         String       @id @default(cuid())
  dni        String
  name       String
  target     Target        @default(MEDICO)
  categoryId String?
  category   Category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String        @unique
  productos  Product[]    // Relation to Producto model
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model CategoriesOnCourses {
  id          String   @id @default(cuid())
  courseId    String
  categoryId  String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(cuid())
  name      String
  courses   CategoriesOnCourses[]
  empresas  Empresa[] // Relaci√≥n con empresas
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Module {
  id          String   @id @default(cuid())
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  description String
  classes     Class[]
}

model Class {
  id          String   @id @default(cuid())
  moduleId    String
  module      Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  description String
  comments    Comment[]
}

model Comment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  classId     String
  class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  type        CommentType
  rating      Int
  content     String
  createdAt   DateTime @default(now())
}

model CourseEnrollment {
  id         String   @id @default(cuid())
  courseId   String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime @default(now())
}

enum Role {
  MEDICO
  CAPACITADOR
  COSMETOLOGO
  ADMIN
  ESTANDAR
  EMPRESA
  INSTRUCTOR
}

enum CommentType {
  TEXT
  RATING
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Profession {
  MEDICO
  ESTETICISTA
}

enum Target {
  MEDICO
  ESTETICISTA
}
