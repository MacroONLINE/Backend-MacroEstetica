generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionType {
  ORO
  PLATA
  BRONCE
  BASICO
  INTERMEDIO
  PREMIUM
}

enum Role {
  MEDICO
  COSMETOLOGO
  ADMIN
  ESTANDAR
  EMPRESA
  INSTRUCTOR
}

enum ProfessionType {
  MEDICO
  COSMETOLOGO
  ESTETICISTA
}

enum Target {
  MEDICO
  COSMETOLOGO
}

enum Profession {
  MEDICO_DERMATOLOGIA
  MEDICO_MEDICINA_ESTETICA
  MEDICO_ESTUDIANTE_DE_MEDICINA
  COSMETOLOGO_COSMIATRIA
  COSMETOLOGO_COSMETOLOGIA
  COSMETOLOGO_ADMINISTRACION_SPA
  COSMETOLOGO_NUTRICION
  COSMETOLOGO_TERAPIA_FISICA_REHABILITACION
  COSMETOLOGO_MEDICINA_ALTERNATIVA
  COSMETOLOGO_QUIMICA_COSMETICA
  COSMETOLOGO_ESTUDIANTE_AREA_ESTETICA
  COSMETOLOGO_ESTETICA
  DERMATOLOGIA
  MEDICINA_ESTETICA
  ESTUDIANTE_DE_MEDICINA
  COSMIATRIA
  COSMETOLOGIA
  ADMINISTRACION_SPA
  NUTRICION
  TERAPIA_FISICA_REHABILITACION
  MEDICINA_ALTERNATIVA
  QUIMICA_COSMETICA
  ESTUDIANTE_AREA_ESTETICA
  ESTETICA
}

enum Giro {
  EMPRESA_PROFESIONAL_PERFIL
  EMPRESA_APARATOLOGIA_PERFIL
  EMPRESA_MOBILIARIO_PERFIL
  EMPRESA_DESECHABLES_PERFIL
  EMPRESA_AROMATERAPIA_PERFIL
  EMPRESA_FABRICANTE_LABORATORIO_PERFIL
  EMPRESA_ADMINISTRACION_PERFIL
  SOCIEDAD_ASOCIACION_PERFIL
  UNIVERSIDAD_ESCUELA_PERFIL
  SERVICIOS_DIGITALES_PERFIL
  OTRO_PERFIL
}

enum EmpresaCategory {
  EMPRESA_PERFIL
  SOCIEDAD_ASOCIACION_PERFIL
  UNIVERSIDAD_ESCUELA_PERFIL
  OTRO_PERFIL
}

enum CommentType {
  TEXT
  RATING
}

enum MessageType {
  direct
  product
}

enum ChatEntityType {
  STREAM
  WORKSHOP
  CLASSROOM
}

enum Unit {
  ML
  G
  KG
  OZ
  L
  FL_OZ
  MG
}

model User {
  id                     String               @id @default(cuid())
  firstName              String?
  lastName               String?
  profileImageUrl        String?              @default("https://res.cloudinary.com/dwcrzwawj/image/upload/v1735332034/11_que_es_un_cosmetico_lider_uy08ij.jpg")
  phone                  String?
  email                  String               @unique
  emailVerified          DateTime?
  address                String?
  province               String?
  city                   String?
  country                String?              @default("Mexico")
  countryCode            String?              @default("MX")
  zipCode                String?
  role                   Role                 @default(ESTANDAR)
  password               String
  status                 Boolean              @default(true)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  newsletter             Boolean              @default(false)
  comments               Comment[]            @relation("UserComments")
  enrollments            CourseEnrollment[]
  instructor             Instructor?
  medico                 Medico?
  Session                Session[]
  userSubscription       String?
  attendedEvents         Event[]              @relation("EventAttendees")
  eventEnrollments       EventEnrollment[]
  workshopEnrollments    WorkshopEnrollment[]
  attendedWorkshops      Workshop[]           @relation("WorkshopAttendees")
  classroomEnrollments   ClassroomEnrollment[]
  attendedClassrooms     Classroom[]          @relation("ClassroomAttendees")
  attendedStreams        EventStream[]        @relation("EventStreamAttendees")
  eventStreamEnrollments EventStreamEnrollment[] @relation("UserEventStreamEnrollments")
  chatMessages           ChatMessage[] 
  authoredBlogs          BlogAuthor?
  blogComments           BlogComment[]
  blogRatings            BlogRating[]
  classProgress          ClassProgress[]
  empresa                Empresa?
}

model Medico {
  id           String         @id @default(cuid())
  profession   Profession     @default(DERMATOLOGIA)
  type         ProfessionType @default(MEDICO)
  verification String
  userId       String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Empresa {
  id                   String                   @id @default(cuid())
  dni                  String?
  legalName            String?
  name                 String
  giro                 Giro                     @default(EMPRESA_PROFESIONAL_PERFIL)
  categoria            EmpresaCategory          @default(EMPRESA_PERFIL)
  userId               String                   @unique
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @default(now())
  subscription         SubscriptionType?
  user                 User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  instructores         Instructor[]             @relation("EmpresaInstructors")
  productos            Product[]
  categorias           ProductCompanyCategory[]
  empresaSubscriptions EmpresaSubscription[]
  bannerImage          String?
  logo                 String?
  title                String?
  profileImage         String?
  ceo                  String?
  ceoRole              String?
  location             String?
  followers            Int                      @default(0)
  webUrl               String?
  banners              Banner[]
  minisite             Minisite?
  leadingEvents        Event[]                  @relation("LeadingCompany")
  blogPosts            BlogPost[]
}

model Subscription {
  id            String                @id @default(cuid())
  type          SubscriptionType      @unique
  description   String
  price         Float
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now())
  subscriptions EmpresaSubscription[]
}

model EmpresaSubscription {
  id             String       @id @default(cuid())
  empresaId      String
  subscriptionId String
  startDate      DateTime     @default(now())
  endDate        DateTime
  status         String       @default("active")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  empresa        Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String      @id @default(cuid())
  userId    String
  classId   String?
  type      CommentType
  rating    Int
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  courseId  String?
  class     Class?      @relation(fields: [classId], references: [id], onDelete: Cascade)
  course    Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User        @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id                   String             @id @default(cuid())
  title                String
  bannerUrl            String
  description          String
  level                String
  rating               Float              @default(0)
  commentsCount        Int                @default(0)
  averageRating        Float              @default(0)
  instructorId         String?
  price                Float
  discountPercentage   Float?
  participantsCount    Int                @default(0)
  target               Target             @default(MEDICO)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now())
  categoryId           String
  isFeatured           Boolean?
  courseImageUrl       String             @default("")
  aboutDescription     String?
  requirements         Json?
  totalHours           Int                @default(1)
  whatYouWillLearn     Json?
  introductoryVideoUrl String?
  comments             Comment[]
  category             Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  instructor           Instructor?        @relation(fields: [instructorId], references: [id])
  enrollments          CourseEnrollment[]
  modules              Module[]
  resources            Resource[]
}

model Resource {
  id        String   @id @default(cuid())
  courseId  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Instructor {
  id                String         @id @default(cuid())
  profession        Profession
  type              ProfessionType
  description       String
  experienceDescription String     @default("")
  experienceYears   Int
  certificationsUrl String
  status            String
  userId            String         @unique
  empresaId         String?
  empresa           Empresa?       @relation("EmpresaInstructors", fields: [empresaId], references: [id], onDelete: Cascade)
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses           Course[]
  categoryId        String?
  category          Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now())
  bannerImage       String?
  followers         Int?
  title             String?
  streams           EventStream[]  @relation("StreamOrators")
  workshops         Workshop[]     @relation("WorkshopInstructors")
  classrooms        Classroom[]    @relation("ClassroomInstructors")
}

model Category {
  id          String       @id @default(cuid())
  name        String
  urlIcon     String
  colorHex    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  courses     Course[]
  instructors Instructor[]
}

model Module {
  id          String   @id @default(cuid())
  courseId    String?
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  classes     Class[]
  course      Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Class {
  id             String           @id @default(cuid())
  moduleId       String?
  description    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  videoUrl       String?
  module         Module?          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  comments       Comment[]
  classResources ClassResource[]
  progress       ClassProgress[]
}

model ClassResource {
  id        String   @id @default(cuid())
  classId   String
  title     String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model ClassProgress {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  completed Boolean  @default(false)
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Classroom {
  id               String               @id @default(cuid())
  title            String
  description      String
  price            Float?
  isFree           Boolean              @default(false)
  startDateTime    DateTime             @default(now())
  endDateTime      DateTime             @default(now())
  imageUrl         String?
  channelName      String?              @unique
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @default(now())
  orators          Instructor[]         @relation("ClassroomInstructors")
  enrollments      ClassroomEnrollment[]
  attendees        User[]               @relation("ClassroomAttendees")
  categories       Profession[]         @default([MEDICO_DERMATOLOGIA])
}

model ClassroomEnrollment {
  id          String     @id @default(cuid())
  classroomId String
  userId      String
  status      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  classroom   Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([classroomId, userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CourseEnrollment {
  id         String   @id @default(cuid())
  courseId   String
  userId     String
  enrolledAt DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Transaction {
  id                      String   @id @default(cuid())
  stripePaymentIntentId   String?  @unique
  stripeCheckoutSessionId String?  @unique
  invoiceId               String?
  status                  String
  amount                  Float
  currency                String
  userId                  String?
  courseId                String?
  description             String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @default(now())
  responseData            Json
}

model Banner {
  id              String   @id @default(cuid())
  banner          String
  title           String
  description     String
  date            DateTime?
  cta_url         String?
  cta_button_text String   @default("¡Clic aquí!")
  logo            String
  empresaId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  empresa         Empresa? @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

model Event {
  id               String            @id @default(cuid())
  title            String
  longDescription  String?           @db.Text
  mainBannerUrl    String?
  mainImageUrl     String?
  physicalLocation String?
  startDateTime    DateTime
  endDateTime      DateTime
  mapUrl           String?
  leadingCompanyId String?
  leadingCompany   Empresa?          @relation("LeadingCompany", fields: [leadingCompanyId], references: [id], onDelete: Cascade)
  target           Target?
  price            Float             @default(0)
  enrollments      EventEnrollment[]
  streams          EventStream[]
  workshops        Workshop[]
  organizers       EventOrganizer[]
  attendees        User[]            @relation("EventAttendees")
  brands           EventBrand[]
  categories       Profession[]      @default([MEDICO_DERMATOLOGIA])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
}

model EventEnrollment {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([eventId, userId])
}

model EventOrganizer {
  id        String   @id @default(cuid())
  eventId   String
  name      String
  career    String?
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventStream {
  id            String       @id @default(cuid())
  eventId       String
  channelName   String?      @unique
  name          String       @default("")
  description   String       @default("")
  startDateTime DateTime
  endDateTime   DateTime
  imageUrl      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  orators       Instructor[] @relation("StreamOrators")
  attendees     User[]       @relation("EventStreamAttendees")
  categories    Profession[] @default([MEDICO_DERMATOLOGIA])
  enrollments   EventStreamEnrollment[] @relation("EventStreamEnrollments")
}

model Workshop {
  id               String               @id @default(cuid())
  eventId          String?
  title            String
  description      String
  whatYouWillLearn String?
  price            Float?
  isFree           Boolean              @default(false)
  startDateTime    DateTime
  endDateTime      DateTime
  imageUrl         String?
  channelName      String?              @unique
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @default(now())
  event            Event?               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  orators          Instructor[]         @relation("WorkshopInstructors")
  enrollments      WorkshopEnrollment[]
  attendees        User[]               @relation("WorkshopAttendees")
  categories       Profession[]         @default([MEDICO_DERMATOLOGIA])
}

model WorkshopEnrollment {
  id         String   @id @default(cuid())
  workshopId String
  userId     String
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  workshop   Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([workshopId, userId])
}

// BLOG MODELS

model BlogAuthor {
  id                String   @id @default(cuid())
  userId            String   @unique
  description       String
  experienceYears   Int      @default(0)
  certificationsUrl String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "User_BlogAuthor")
  blogPosts         BlogPost[]
}

model BlogCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  iconUrl   String?
  colorHex  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  blogPosts BlogPost[] @relation("BlogPostCategories")
}

model BlogPost {
  id             String          @id @default(cuid())
  title          String
  content        String          @db.Text
  description    String          @default("")
  bannerImage    String?
  empresaId      String
  empresa        Empresa         @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  authorId       String
  author         BlogAuthor      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  averageRating  Float           @default(0)
  totalRatings   Int             @default(0)
  totalReaders   Int?            @default(0)
  usefulCount    Int?            @default(0)
  notUsefulCount Int?            @default(0)
  categories     BlogCategory[]  @relation("BlogPostCategories")
  comments       BlogComment[]   @relation("BlogPostComments")
  ratings        BlogRating[]
}

model BlogComment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  post      BlogPost @relation("BlogPostComments", fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogRating {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  rating    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// CHAT

model ChatRoom {
  id          String          @id @default(cuid())
  entityId    String
  entityType  ChatEntityType
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  messages    ChatMessage[]   @relation("ChatRoomMessages")
}

model ChatMessage {
  id         String    @id @default(cuid())
  chatRoomId String
  userId     String    @default("user-001")
  message    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  chatRoom   ChatRoom  @relation("ChatRoomMessages", fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EventBrand {
  id        String   @id @default(cuid())
  name      String
  imageUrl  String?
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventStreamEnrollment {
  id             String       @id @default(cuid())
  eventStreamId  String
  userId         String
  status         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  eventStream    EventStream  @relation("EventStreamEnrollments", fields: [eventStreamId], references: [id], onDelete: Cascade)
  user           User         @relation("UserEventStreamEnrollments", fields: [userId], references: [id], onDelete: Cascade)
  @@unique([eventStreamId, userId])
}

model Message {
  id          String      @id @default(cuid())
  name        String
  phone       String
  email       String
  description String
  userId      String?
  empresaId   String?
  productId   String?
  type        MessageType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
}

// MINISITE

model Minisite {
  id                String   @id @default(cuid())
  empresaId         String   @unique
  empresa           Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  videoUrl          String?
  aboutDescription  Json?
  followersCount    Int?     @default(0)
  coursesCount      Int?     @default(0)
  productsCount     Int?     @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  slides            MinisiteSlide[]
  benefits          MinisiteBenefit[]
  offers            MinisiteOffer[]
  featuredProducts  MinisiteFeaturedProduct[]
  highlightProducts MinisiteHighlightProduct[]
  minisiteColor     String?
  slogan            String?
  catalogueUrl      String?
  specialities      MinisiteSpeciality[]
}

model MinisiteSlide {
  id          String   @id @default(cuid())
  minisiteId  String
  minisite    Minisite @relation(fields: [minisiteId], references: [id], onDelete: Cascade)
  title       String
  description String
  cta         String?
  imageSrc    String?
  order       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model MinisiteBenefit {
  id          String   @id @default(cuid())
  minisiteId  String
  minisite    Minisite @relation(fields: [minisiteId], references: [id], onDelete: Cascade)
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model MinisiteOffer {
  id           String                 @id @default(cuid())
  minisiteId   String
  minisite     Minisite               @relation(fields: [minisiteId], references: [id], onDelete: Cascade)
  sectionTitle String?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @default(now())
  products     MinisiteOfferProduct[]
}

model MinisiteOfferProduct {
  id          String        @id @default(cuid())
  offerId     String
  offer       MinisiteOffer @relation(fields: [offerId], references: [id], onDelete: Cascade)
  title       String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
}

model MinisiteFeaturedProduct {
  id         String   @id @default(cuid())
  minisiteId String
  minisite   Minisite @relation(fields: [minisiteId], references: [id], onDelete: Cascade)
  productId  String   @unique
  product    Product? @relation("FeaturedRelation", fields: [productId], references: [id], onDelete: Cascade)
  order      Int?
  tagline    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model MinisiteHighlightProduct {
  id                   String   @id @default(cuid())
  minisiteId           String
  productId            String
  minisite             Minisite @relation(fields: [minisiteId], references: [id], onDelete: Cascade)
  product              Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  highlightFeatures    String[]
  highlightDescription String?
  hoghlightImageUrl    String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  @@unique([minisiteId, productId])
}

model MinisiteSpeciality {
  id         String   @id @default(cuid())
  minisiteId String
  minisite   Minisite @relation(fields: [minisiteId], references: [id], onDelete: Cascade)
  imageUrl   String
  title      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model ProductCompanyCategory {
  id               Int       @id @default(autoincrement())
  name             String    @db.VarChar(100)
  companyId        String
  company          Empresa   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  products         Product[] @relation("CategoryProducts")
  bannerImageUrl   String?
  miniSiteImageUrl String?
  footerBanner     String?
  iconUrl          String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  @@unique([name, companyId])
  @@index([companyId])
}

model Product {
  id                String                     @id @default(cuid())
  name              String                     @db.VarChar(200)
  description       String                     @db.Text
  lab               String?
  activeIngredients String[]
  features          String[]
  benefits          String[]
  problemAddressed  String?
  imageMain         String?
  imageGallery      String[]
  isFeatured        Boolean?                   @default(false)
  isBestSeller      Boolean?                   @default(false)
  isOnSale          Boolean?                   @default(false)
  companyId         String
  company           Empresa                    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  featured          MinisiteFeaturedProduct?   @relation("FeaturedRelation")
  categoryId        Int
  category          ProductCompanyCategory     @relation("CategoryProducts", fields: [categoryId], references: [id], onDelete: Cascade)
  presentations     Presentation[]             @relation("ProductPresentations")
  highlightProducts MinisiteHighlightProduct[]
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @default(now())
  @@unique([categoryId, name])
}

model Presentation {
  id          Int      @id @default(autoincrement())
  productId   String
  product     Product  @relation("ProductPresentations", fields: [productId], references: [id], onDelete: Cascade)
  size        Decimal
  unit        Unit
  description String?
  price       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  @@index([productId])
}
