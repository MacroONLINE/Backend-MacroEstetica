generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  firstName     String?
  lastName      String?
  phone         String?
  email         String         @unique
  emailVerified DateTime?
  address       String?
  province      String?
  city          String?
  country       String?        @default("Mexico")
  countryCode   String?        @default("MX")
  zipCode       String?
  role          Role           @default(ESTANDAR)
  password      String
  status        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  newsletter    Boolean        @default(false)
  Session       Session[]
  medico        Medico?
  empresa       Empresa?
  instructor    Instructor?
  comments      Comment[]      @relation("UserComments")
  enrollments   CourseEnrollment[]
}

model Medico {
  id           String       @id @default(cuid())
  profession   Profession   @default(ESTETICA)
  type         ProfessionType @default(ESTETICISTA)
  verification String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String       @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
}

model Empresa {
  id         String       @id @default(cuid())
  dni        String?
  name       String
  giro       Giro          @default(SERVICIOS)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String        @unique
  instructores Instructor[]
  productos  Product[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())
}

model Comment {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  classId     String?
  class       Class?       @relation(fields: [classId], references: [id], onDelete: Cascade)
  courseId    String?
  course      Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  type        CommentType
  rating      Int
  content     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
}

model Course {
  id                  String    @id @default(cuid())
  title               String
  bannerUrl           String
  courseImageUrl      String    @default("")
  description         String
  aboutDescription    String?   // Hacemos opcional esta columna
  totalHours          Int       @default(1)
  whatYouWillLearn    Json?     // Hacemos opcional esta columna
  requirements        Json?     // Hacemos opcional esta columna
  categoryId          String
  category            Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  instructorId        String?
  instructor          Instructor? @relation(fields: [instructorId], references: [id])
  rating              Float     @default(0)
  commentsCount       Int       @default(0)
  averageRating       Float     @default(0)
  level               String
  price               Float
  discountPercentage  Float?
  participantsCount   Int       @default(0)
  target              Target    @default(MEDICO)
  isFeatured          Boolean?
  modules             Module[]
  resources           Resource[]
  comments            Comment[]
  enrollments         CourseEnrollment[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now())
}


model Resource {
  id        String   @id @default(cuid())
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Instructor {
  id                String       @id @default(cuid())
  profession        Profession
  type              ProfessionType
  description       String
  experienceYears   Int
  certificationsUrl String
  status            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String       @unique
  courses           Course[]
  companyId         String?
  company           Empresa?     @relation(fields: [companyId], references: [id], onDelete: SetNull)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now())
}

model Category {
  id        String      @id @default(cuid())
  name      String
  urlIcon   String
  colorHex  String
  courses   Course[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
}

model Module {
  id          String   @id @default(cuid())
  courseId    String?
  course      Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  description String
  classes     Class[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Class {
  id          String   @id @default(cuid())
  moduleId    String?
  module      Module?   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  description String
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Product {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(200)
  description        String?   @db.Text
  cost               Decimal   @db.Decimal(10, 2)
  discount           Decimal?  @db.Decimal(10, 2)
  productCode        String    @unique @db.VarChar(100)
  availableQuantity  Int
  isFeatured         Boolean   @default(false)
  companyId          String
  company            Empresa   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
}

model CourseEnrollment {
  id         String   @id @default(cuid())
  courseId   String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime @default(now())
}

enum Role {
  MEDICO
  COSMETOLOGO
  ADMIN
  ESTANDAR
  EMPRESA
  INSTRUCTOR
}

enum Profession {
  DERMATOLOGIA
  MEDICINA_ESTETICA
  ESTUDIANTE_DE_MEDICINA
  ESTETICA
  COSMIATRIA
  COSMETOLOGIA
  ADMINISTRACION_SPA
  NUTRICION
  TERAPIA_FISICA_REHABILITACION
  MEDICINA_ALTERNATIVA
  QUIMICA_COSMETICA
  ESTUDIANTE_AREA_ESTETICA
}

enum ProfessionType {
  MEDICO
  ESTETICISTA
}

enum Giro {
  SERVICIOS
  PRODUCTOS
  CONSULTORIA
  OTRO
}

enum Target {
  MEDICO
  ESTETICISTA
}

enum CommentType {
  TEXT
  RATING
}
