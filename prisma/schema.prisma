generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------------
//               MODELS
// -------------------------------------

model User {
  id               String             @id @default(cuid())
  firstName        String?
  lastName         String?
  phone            String?
  email            String             @unique
  emailVerified    DateTime?
  address          String?
  province         String?
  city             String?
  country          String?            @default("Mexico")
  countryCode      String?            @default("MX")
  zipCode          String?
  role             Role               @default(ESTANDAR)
  password         String
  status           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  newsletter       Boolean            @default(false)
  comments         Comment[]          @relation("UserComments")
  enrollments      CourseEnrollment[]
  empresa          Empresa?
  instructor       Instructor?
  medico           Medico?
  Session          Session[]
  userSubscription String?

  // Relación para los asistentes a eventos
  attendedEvents   Event[]            @relation("EventAttendees")
}

model Medico {
  id           String         @id @default(cuid())
  profession   Profession     @default(DERMATOLOGIA)
  type         ProfessionType @default(MEDICO)
  verification String
  userId       String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Empresa {
  id                   String                  @id @default(cuid())
  dni                  String?
  name                 String
  giro                 Giro                    @default(EMPRESA_PROFESIONAL_PERFIL)
  categoria            EmpresaCategory         @default(EMPRESA_PERFIL)
  userId               String                  @unique
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @default(now())
  subscription         SubscriptionType?
  user                 User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relación con Instructor
  // (Campo en plural; cada Instructor tiene un campo `empresa` en su modelo)
  instructores         Instructor[]            @relation("EmpresaInstructors")

  productos            Product[]
  categorias           ProductCompanyCategory[] 
  empresaSubscriptions EmpresaSubscription[]
  bannerImage          String?
  logo                 String?
  title                String?
  profileImage         String?
  ceo                  String?
  ceoRole              String?
  location             String?
  followers            Int                     @default(0)
  webUrl               String?
  banners              Banner[]
}

model Subscription {
  id            String             @id @default(cuid())
  type          SubscriptionType   @unique
  description   String
  price         Float
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  subscriptions EmpresaSubscription[]
}

model EmpresaSubscription {
  id             String   @id @default(cuid())
  empresaId      String
  subscriptionId String
  startDate      DateTime @default(now())
  endDate        DateTime
  status         String   @default("active")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  empresa        Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String      @id @default(cuid())
  userId    String
  classId   String?
  type      CommentType
  rating    Int
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  courseId  String?

  class   Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
  course  Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Relación con Usuario
  user    User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id                 String             @id @default(cuid())
  title              String
  bannerUrl          String
  description        String
  level              String
  rating             Float              @default(0)
  commentsCount      Int                @default(0)
  averageRating      Float              @default(0)
  instructorId       String?
  price              Float
  discountPercentage Float?
  participantsCount  Int                @default(0)
  target             Target             @default(MEDICO)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now())
  categoryId         String
  isFeatured         Boolean?
  courseImageUrl     String             @default("")
  aboutDescription   String?
  requirements       Json?
  totalHours         Int                @default(1)
  whatYouWillLearn   Json?
  introductoryVideoUrl String?
  
  comments     Comment[]
  category     Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  instructor   Instructor? @relation(fields: [instructorId], references: [id])
  enrollments  CourseEnrollment[]
  modules      Module[]
  resources    Resource[]
}

model Resource {
  id        String   @id @default(cuid())
  courseId  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Instructor {
  id                String        @id @default(cuid())
  profession        Profession
  type              ProfessionType
  description       String
  experienceYears   Int
  certificationsUrl String
  status            String
  userId            String        @unique
  
  // Relación con Empresa
  empresaId         String?
  empresa           Empresa?      @relation("EmpresaInstructors", fields: [empresaId], references: [id], onDelete: Cascade)

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses           Course[]

  // Relación con Event
  events            Event[]       @relation("InstructorEvents")

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Category {
  id        String   @id @default(cuid())
  name      String
  urlIcon   String
  colorHex  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relación many-to-many con Event
  courses   Course[]
  events    Event[]   @relation("EventCategories")
}

model Module {
  id          String   @id @default(cuid())
  courseId    String?
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  classes     Class[]
  course      Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Class {
  id          String    @id @default(cuid())
  moduleId    String?
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  module      Module?   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  comments    Comment[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model CourseEnrollment {
  id         String   @id @default(cuid())
  courseId   String
  userId     String
  enrolledAt DateTime @default(now())

  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Transaction {
  id                      String   @id @default(cuid())
  stripePaymentIntentId   String?  @unique
  stripeCheckoutSessionId String?  @unique
  invoiceId               String?
  status                  String
  amount                  Float
  currency                String
  userId                  String?
  courseId                String?
  description             String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  responseData            Json
}

model Banner {
  id              String    @id @default(cuid())
  banner          String
  title           String
  description     String
  date            DateTime?
  cta_url         String?
  cta_button_text String    @default("¡Clic aquí!")
  logo            String
  empresaId       String?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  empresa         Empresa?  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

model Event {
  id            String     @id @default(cuid())
  title         String
  description   String
  date          DateTime
  time          String
  location      String
  bannerUrl     String?

  // Relación many-to-many con Category
  categories    Category[] @relation("EventCategories")

  companyId     String?
  instructorId  String

  // Relación con Instructor
  instructor    Instructor @relation("InstructorEvents", fields: [instructorId], references: [id], onDelete: Cascade)

  ctaUrl        String?
  ctaButtonText String      @default("Learn More")
  logoUrl       String?

  // Relación many-to-many con User (asistentes)
  attendees     User[]      @relation("EventAttendees")

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// -------------------------------------
//               ENUMS
// -------------------------------------

enum SubscriptionType {
  ORO
  PLATA
  BRONCE
  BASICO
  INTERMEDIO
  PREMIUM
}

enum Role {
  MEDICO
  COSMETOLOGO
  ADMIN
  ESTANDAR
  EMPRESA
  INSTRUCTOR
}

enum ProfessionType {
  MEDICO
  COSMETOLOGO
  ESTETICISTA
}

enum Target {
  MEDICO
  COSMETOLOGO
}

enum Profession {
  MEDICO_DERMATOLOGIA
  MEDICO_MEDICINA_ESTETICA
  MEDICO_ESTUDIANTE_DE_MEDICINA
  COSMETOLOGO_COSMIATRIA
  COSMETOLOGO_COSMETOLOGIA
  COSMETOLOGO_ADMINISTRACION_SPA
  COSMETOLOGO_NUTRICION
  COSMETOLOGO_TERAPIA_FISICA_REHABILITACION
  COSMETOLOGO_MEDICINA_ALTERNATIVA
  COSMETOLOGO_QUIMICA_COSMETICA
  COSMETOLOGO_ESTUDIANTE_AREA_ESTETICA
  COSMETOLOGO_ESTETICA
  DERMATOLOGIA
  MEDICINA_ESTETICA
  ESTUDIANTE_DE_MEDICINA
  COSMIATRIA
  COSMETOLOGIA
  ADMINISTRACION_SPA
  NUTRICION
  TERAPIA_FISICA_REHABILITACION
  MEDICINA_ALTERNATIVA
  QUIMICA_COSMETICA
  ESTUDIANTE_AREA_ESTETICA
  ESTETICA
}

enum Giro {
  EMPRESA_PROFESIONAL_PERFIL
  EMPRESA_APARATOLOGIA_PERFIL
  EMPRESA_MOBILIARIO_PERFIL
  EMPRESA_DESECHABLES_PERFIL
  EMPRESA_AROMATERAPIA_PERFIL
  EMPRESA_FABRICANTE_LABORATORIO_PERFIL
  EMPRESA_ADMINISTRACION_PERFIL
  SOCIEDAD_ASOCIACION_PERFIL
  UNIVERSIDAD_ESCUELA_PERFIL
  OTRO_PERFIL
}

enum EmpresaCategory {
  EMPRESA_PERFIL
  SOCIEDAD_ASOCIACION_PERFIL
  UNIVERSIDAD_ESCUELA_PERFIL
  OTRO_PERFIL
}

enum CommentType {
  TEXT
  RATING
}


enum Unit {
  ML
  G
  KG
  OZ
  L
  FL_OZ
  MG
}

model ProductCompanyCategory {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  companyId String
  company   Empresa   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  products  Product[] @relation("CategoryProducts")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@unique([name, companyId])
  @@index([companyId])
}

model Product {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(200)
  description       String    @db.Text
  lab               String?
  activeIngredients String[]
  features          String[]
  benefits          String[]
  problemAddressed  String?
  imageMain         String?
  imageGallery      String[]
  isFeatured        Boolean?  @default(false)
  isBestSeller      Boolean?  @default(false)
  isOnSale          Boolean?  @default(false)
  companyId         String
  company           Empresa   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  categoryId        Int
  category          ProductCompanyCategory @relation("CategoryProducts", fields: [categoryId], references: [id], onDelete: Cascade)
  presentations     Presentation[] @relation("ProductPresentations")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())

  @@unique([categoryId, name])
}

model Presentation {
  id          Int       @id @default(autoincrement())
  productId   Int
  product     Product   @relation("ProductPresentations", fields: [productId], references: [id], onDelete: Cascade)
  size        Decimal
  unit        Unit
  description String?
  price       Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  @@index([productId])
}
