generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(cuid())
  firstName     String?
  lastName      String?
  phone         String?
  email         String             @unique
  emailVerified DateTime?
  address       String?
  province      String?
  city          String?
  country       String?            @default("Mexico")
  countryCode   String?            @default("MX")
  zipCode       String?
  role          Role               @default(ESTANDAR)
  password      String
  status        Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  newsletter    Boolean            @default(false)
  comments      Comment[]          @relation("UserComments")
  enrollments   CourseEnrollment[]
  empresa       Empresa?
  instructor    Instructor?
  medico        Medico?
  payments      Payment[]
  Session       Session[]
}

model Medico {
  id           String         @id @default(cuid())
  profession   Profession     @default(DERMATOLOGIA)
  type         ProfessionType @default(COSMETOLOGO)
  verification String
  userId       String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Empresa {
  id                     String                  @id @default(cuid())
  dni                    String?
  name                   String
  giro                   Giro                    @default(EMPRESA_PROFESIONAL_PERFIL)
  categoria              EmpresaCategory         @default(EMPRESA_PERFIL)
  userId                 String                  @unique
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now())
  subscription           SubscriptionType?
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  instructores           Instructor[]
  productos              Product[]
  empresaSubscriptions   EmpresaSubscription[]
  bannerImage            String?
  logo                   String?
  title                  String?
  profileImage           String?
  ceo                    String?
  ceoRole                String?
  location               String?
  followers              Int                    @default(0)
}



model Subscription {
  id               String             @id @default(cuid())
  type             SubscriptionType   @unique // Marcar como Ãºnico
  description      String
  price            Float              // Precio mensual
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  subscriptions    EmpresaSubscription[]
}



model EmpresaSubscription {
  id               String   @id @default(cuid())
  empresaId        String
  subscriptionId   String
  startDate        DateTime @default(now())
  endDate          DateTime
  status           String   @default("active") 
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  empresa          Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  subscription     Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}


model Comment {
  id        String      @id @default(cuid())
  userId    String
  classId   String?
  type      CommentType
  rating    Int
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  courseId  String?
  class     Class?      @relation(fields: [classId], references: [id], onDelete: Cascade)
  course    Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User        @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id                 String             @id @default(cuid())
  title              String
  bannerUrl          String
  description        String
  level              String
  rating             Float              @default(0)
  commentsCount      Int                @default(0)
  averageRating      Float              @default(0)
  instructorId       String?
  price              Float
  discountPercentage Float?
  participantsCount  Int                @default(0)
  target             Target             @default(MEDICO)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now())
  categoryId         String
  isFeatured         Boolean?
  courseImageUrl     String             @default("")
  aboutDescription   String?
  requirements       Json?
  totalHours         Int                @default(1)
  whatYouWillLearn   Json?
  comments           Comment[]
  category           Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  instructor         Instructor?        @relation(fields: [instructorId], references: [id])
  enrollments        CourseEnrollment[]
  modules            Module[]
  payments           Payment[]
  resources          Resource[]
}

model Resource {
  id        String   @id @default(cuid())
  courseId  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Instructor {
  id                String         @id @default(cuid())
  profession        Profession
  type              ProfessionType
  description       String
  experienceYears   Int
  certificationsUrl String
  status            String
  userId            String         @unique
  companyId         String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now())
  courses           Course[]
  company           Empresa?       @relation(fields: [companyId], references: [id])
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(cuid())
  name      String
  urlIcon   String
  colorHex  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  courses   Course[]
}

model Module {
  id          String   @id @default(cuid())
  courseId    String?
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  classes     Class[]
  course      Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Class {
  id          String    @id @default(cuid())
  moduleId    String?
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  module      Module?   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  comments    Comment[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                Int      @id @default(autoincrement())
  name              String   @db.VarChar(200)
  description       String?
  cost              Decimal  @db.Decimal(10, 2)
  discount          Decimal? @db.Decimal(10, 2)
  productCode       String   @unique @db.VarChar(100)
  availableQuantity Int
  companyId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  isFeatured        Boolean  @default(false)
  company           Empresa  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model CourseEnrollment {
  id         String   @id @default(cuid())
  courseId   String
  userId     String
  enrolledAt DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                      String   @id @default(cuid())
  stripePaymentIntentId   String   @unique
  stripeCheckoutSessionId String   @unique
  amount                  Float
  currency                String
  status                  String   @default("pending")
  userId                  String
  courseId                String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @default(now())
  course                  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum SubscriptionType {
  ORO
  PLATA
  BRONCE
}

enum Role {
  MEDICO
  COSMETOLOGO
  ADMIN
  ESTANDAR
  EMPRESA
  INSTRUCTOR
}

enum ProfessionType {
  MEDICO
  COSMETOLOGO
  ESTETICISTA
}

enum Target {
  MEDICO
  COSMETOLOGO
}

enum Profession {
  DERMATOLOGIA
  MEDICINA_ESTETICA
  ESTUDIANTE_DE_MEDICINA
  COSMIATRIA
  COSMETOLOGIA
  ADMINISTRACION_SPA
  NUTRICION
  TERAPIA_FISICA_REHABILITACION
  MEDICINA_ALTERNATIVA
  QUIMICA_COSMETICA
  ESTUDIANTE_AREA_ESTETICA
  ESTETICA
}


enum Giro {
  EMPRESA_PROFESIONAL_PERFIL
  EMPRESA_APARATOLOGIA_PERFIL
  EMPRESA_MOBILIARIO_PERFIL
  EMPRESA_DESECHABLES_PERFIL
  EMPRESA_AROMATERAPIA_PERFIL
  EMPRESA_FABRICANTE_LABORATORIO_PERFIL
  EMPRESA_ADMINISTRACION_PERFIL
  SOCIEDAD_ASOCIACION_PERFIL
  UNIVERSIDAD_ESCUELA_PERFIL
  OTRO_PERFIL
}


enum EmpresaCategory {
  EMPRESA_PERFIL
  SOCIEDAD_ASOCIACION_PERFIL
  UNIVERSIDAD_ESCUELA_PERFIL
  OTRO_PERFIL
}


enum CommentType {
  TEXT
  RATING
}

model Transaction {
  id                      String   @id @default(cuid())
  stripePaymentIntentId   String   @unique
  stripeCheckoutSessionId String   @unique
  status                  String
  amount                  Float
  currency                String
  userId                  String
  courseId                String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  responseData            Json
}

